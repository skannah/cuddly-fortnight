// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyERC1155Contract is ERC1155, Ownable {
    mapping(uint256 => uint256) private _totalSupply;
    mapping(uint256 => string) private _tokenURIs;

    constructor(string memory uri) ERC1155(uri) {}

    function mint(address account, uint256 id, uint256 amount, string memory tokenURI) external onlyOwner {
        _totalSupply[id] += amount;
        _tokenURIs[id] = tokenURI;
        _mint(account, id, amount, "");
    }

    function burn(address account, uint256 id, uint256 amount) external {
        require(msg.sender == account || isApprovedForAll(account, msg.sender), "ERC1155: caller is not owner nor approved");
        require(balanceOf(account, id) >= amount, "ERC1155: insufficient balance");

        _burn(account, id, amount);
        _totalSupply[id] -= amount;
    }

    function totalSupply(uint256 id) external view returns (uint256) {
        return _totalSupply[id];
    }

    function tokenURI(uint256 id) external view returns (string memory) {
        return _tokenURIs[id];
    }

    function setTokenURI(uint256 id, string memory tokenURI) external onlyOwner {
        _tokenURIs[id] = tokenURI;
    }

    function uri(uint256 id) public view override returns (string memory) {
        require(_exists(id), "ERC1155: URI query for nonexistent token");
        return string(abi.encodePacked(super.uri(0), id.toString()));
    }
}
